###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           24/Apr/2020  12:34:17
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\timers.c
#    Command line  =  
#        -f C:\Users\laure\AppData\Local\Temp\EWEE2B.tmp
#        ("C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\timers.c" -lC
#        "C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\Debug\List" -o
#        "C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code
#        Submission\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\laure\OneDrive\Documents\ECE_306_Code\Project 10 Code Submission\timers.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Timer function that will enable and 
      4          //               disable certain timers.
      5          //
      6          //
      7          //  Lauren Crawford
      8          //  02/21/2020
      9          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
     10          //------------------------------------------------------------------------------
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16          
     17          // Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow

   \                                 In  segment CODE, align 2
     18          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     19            TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     20            TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     21            TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     22            TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     23            TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     24            TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240A8619203 MOV.W   #0x61a8, &0x392
     25            TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D010008203 BIS.W   #0x10, &0x382
     26            TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000028   B240A8619403 MOV.W   #0x61a8, &0x394
     27            TB0CCTL1 &= ~CCIE; // CCR1 enable interrupt
   \   00002E   B2C010008403 BIC.W   #0x10, &0x384
     28            // TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
     29            // TB0CCTL2 |= CCIE; // CCR2 enable interrupt
     30            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000034   A2C38003     BIC.W   #0x2, &0x380
     31            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000038   92C38003     BIC.W   #0x1, &0x380
     32          }
   \   00003C   1001         RETA
   \   00003E                REQUIRE _A_TB0CTL_L
   \   00003E                REQUIRE _A_TB0EX0_L
   \   00003E                REQUIRE _A_TB0CCR0_L
   \   00003E                REQUIRE _A_TB0CCTL0_L
   \   00003E                REQUIRE _A_TB0CCR1_L
   \   00003E                REQUIRE _A_TB0CCTL1_L
     33          

   \                                 In  segment CODE, align 2
     34          void Init_Timers(void){
   \                     Init_Timers:
     35            Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     36            Init_Timer_B3();
   \   000004   ........     BRA     #Init_Timer_B3
     37          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timers
        4   -> Init_Timer_B0
        0   -> Init_Timer_B3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  Init_Timer_B0
       8  Init_Timers
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L

 
 70 bytes in segment CODE
 12 bytes in segment DATA16_AN
 
 70 bytes of CODE memory
  0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
